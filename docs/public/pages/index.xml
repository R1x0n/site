<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pages on R1x0n</title>
    <link>https://r1x0n.github.io/site/pages/</link>
    <description>Recent content in Pages on R1x0n</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 02 Dec 2021 11:44:31 +0100</lastBuildDate><atom:link href="https://r1x0n.github.io/site/pages/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Shell Code</title>
      <link>https://r1x0n.github.io/site/pages/cyber-challenge/shell-code/</link>
      <pubDate>Thu, 02 Dec 2021 11:44:31 +0100</pubDate>
      
      <guid>https://r1x0n.github.io/site/pages/cyber-challenge/shell-code/</guid>
      <description>Goal of the exercise Have a shell and print the contents of the flag file.
Research And Reverse Engineering Test See if there are any protections: I see it with &amp;ldquo;checksec&amp;rdquo; command:
Apparently the program has no protection. What the program uses: I see it with &amp;ldquo;ltrace&amp;rdquo; command: I want to know more about &amp;ldquo;puts&amp;rdquo; and &amp;ldquo;read&amp;rdquo;: Decompiled C code: main():
int __cdecl main(int argc, const char **argv, const char **envp) { setvbuf(stdin, 0, 2, 0); setvbuf(stdout, 0, 2, 0); puts( &amp;#34; _________.</description>
    </item>
    
    <item>
      <title>Easy Leak</title>
      <link>https://r1x0n.github.io/site/pages/cyber-challenge/easy-leak/</link>
      <pubDate>Thu, 13 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://r1x0n.github.io/site/pages/cyber-challenge/easy-leak/</guid>
      <description>Goal of the exercise Have the program to print the contents of the flag file.
Research And Reverse Engineering Test See if there are any protections: It appears to be only “NX” enabled.
Decompiled C code of the executable: int __cdecl __noreturn main(int argc, const char **argv, const char **envp) { FILE *stream; // [rsp+0h] [rbp-50h]  char s1; // [rsp+10h] [rbp-40h]  char *s; // [rsp+30h] [rbp-20h]  const char *v6; // [rsp+38h] [rbp-18h]  const char *v7; // [rsp+40h] [rbp-10h]  unsigned __int64 v8; // [rsp+48h] [rbp-8h]  v8 = __readfsqword(0x28u); memset(&amp;amp;s1, 0, 0x38uLL); s = &amp;#34;[!</description>
    </item>
    
  </channel>
</rss>
